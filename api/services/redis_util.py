import os
import redis
from api.models.base.id_generator import IDGenerator


class RedisUtil:
    REDIS = redis.from_url(os.getenv('REDIS_SERVER_URL'))

    @classmethod
    def set_value(cls, value, expiry_time):
        """Caches a value to redis.

        It generates a unique key for the new redis value.
        This value would be removed once the expiry time is reached

        Args:
            value (str): The value to be cached. Must be a string
            expiry_time  (datetime.timedelta): When the value should be auto deleted from redis

        Returns:
            str: a the unique key that was generated for the value
        """
        unique_key = IDGenerator.generate_id()
        success = cls.REDIS.set(unique_key, value)
        cls.REDIS.expire(unique_key, int(expiry_time.total_seconds()))
        return unique_key, success

    @classmethod
    def get_key(cls, key):
        """Retrieves the value of a redis key

        Args:
            key str: An id that was previously generated by this class

        Returns:

        """
        return cls.REDIS.get(key)

    @classmethod
    def delete_key(cls, key):
        """Removes a key from redis.

        This is called to free up memory.

        Args:
            key:

        """
        return cls.REDIS.delete(key)
