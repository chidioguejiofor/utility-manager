"""Generates Log and LogValue models

Revision ID: 13a5ae8f1e7b
Revises: c78e26fafbff
Create Date: 2020-04-22 11:03:35.503399

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '13a5ae8f1e7b'
down_revision = 'c78e26fafbff'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Log',
    sa.Column('id', sa.String(length=21), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('appliance_id', sa.String(length=21), nullable=True),
    sa.Column('created_by_id', sa.String(length=21), nullable=True),
    sa.Column('updated_by_id', sa.String(length=21), nullable=True),
    sa.Column('organisation_id', sa.String(length=21), nullable=False),
    sa.ForeignKeyConstraint(['appliance_id'], ['Appliance.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['User.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['organisation_id'], ['Organisation.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['User.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('LogValue',
    sa.Column('id', sa.String(length=21), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('parameter_id', sa.String(length=21), nullable=True),
    sa.Column('log_id', sa.String(length=21), nullable=True),
    sa.ForeignKeyConstraint(['log_id'], ['Log.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parameter_id'], ['Parameter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_constraint('appliance_parameter_unique_indx', 'ApplianceParameter', type_='unique')
    op.create_unique_constraint('appliance_parameter_unique_indx', 'ApplianceParameter', ['appliance_id', 'parameter_id'])
    op.drop_constraint('ApplianceParameter_created_by_id_fkey', 'ApplianceParameter', type_='foreignkey')
    op.drop_constraint('ApplianceParameter_organisation_id_fkey', 'ApplianceParameter', type_='foreignkey')
    op.drop_constraint('ApplianceParameter_updated_by_id_fkey', 'ApplianceParameter', type_='foreignkey')
    op.drop_column('ApplianceParameter', 'created_by_id')
    op.drop_column('ApplianceParameter', 'updated_by_id')
    op.drop_column('ApplianceParameter', 'organisation_id')
    op.execute('DROP INDEX if exists "unit_name_and_letter_when_org_is_null" ')
    op.create_index('unit_name_and_letter_when_org_is_null', 'Unit', ['name', 'symbol'], unique=True, postgresql_where=sa.text('organisation_id IS NULL'))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('unit_name_and_letter_when_org_is_null', table_name='Unit')
    op.add_column('ApplianceParameter', sa.Column('organisation_id', sa.VARCHAR(length=21), autoincrement=False, nullable=True))
    op.add_column('ApplianceParameter', sa.Column('updated_by_id', sa.VARCHAR(length=21), autoincrement=False, nullable=True))
    op.add_column('ApplianceParameter', sa.Column('created_by_id', sa.VARCHAR(length=21), autoincrement=False, nullable=True))
    op.create_foreign_key('ApplianceParameter_updated_by_id_fkey', 'ApplianceParameter', 'User', ['updated_by_id'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')
    op.create_foreign_key('ApplianceParameter_organisation_id_fkey', 'ApplianceParameter', 'Organisation', ['organisation_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('ApplianceParameter_created_by_id_fkey', 'ApplianceParameter', 'User', ['created_by_id'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')
    op.drop_constraint('appliance_parameter_unique_indx', 'ApplianceParameter', type_='unique')
    op.create_unique_constraint('appliance_parameter_unique_indx', 'ApplianceParameter', ['appliance_id', 'parameter_id', 'organisation_id'])
    op.drop_table('LogValue')
    op.drop_table('Log')
    # ### end Alembic commands ###
